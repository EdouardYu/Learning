{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport POKEMONS from \"../models/mock-pokemon\";\n\n// Ceci est un hook personnalisé\nconst usePokemons = () => {\n  _s();\n  // ce hook personnalisé comporte d'autres hooks (useState et useEffect ici)\n  // les crochets servent pour le destructuring d'es6\n  const [pokemons, setPokemons] = useState([]);\n  // Au lieu de :\n  // const pokemonsStateVariable = useState<Pokemon[]>([]);\n  // const pokemons = pokemonsStateVariable[0];\n  // const setPokemons = pokemonsStateVariable[1];\n  // Pour récupérer seulement les pokémons, on peut faire :\n  // const [pokemons] = useState<Pokemon[]>(POKEMONS);\n\n  useEffect(() => {\n    setPokemons(POKEMONS);\n  }, []);\n  // le tableau vide en argument permet d'éviter de déclencher\n  // le hook d'effet à chaque modification du composant\n  // il se déclenche que lors du premier rendu\n  // Si on ajoute des dépendances au tableau, le hook se déclenchera aussi\n  // lors de des modifications de ses dépendances\n  // Si, on ne met rien, le hook s'active à chaque modification du composant\n\n  return pokemons;\n};\n_s(usePokemons, \"HTV26hiVYObM9ZdttYFfm0Hoy8g=\");\nexport default usePokemons;","map":{"version":3,"names":["useState","useEffect","POKEMONS","usePokemons","_s","pokemons","setPokemons"],"sources":["C:/Users/yuedo/OneDrive/Bureau/JS/React/pokedex/client/src/hooks/pokemon.hook.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n\r\n// Ceci est un hook personnalisé\r\nconst usePokemons = () => {\r\n  // ce hook personnalisé comporte d'autres hooks (useState et useEffect ici)\r\n  // les crochets servent pour le destructuring d'es6\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n  // Au lieu de :\r\n  // const pokemonsStateVariable = useState<Pokemon[]>([]);\r\n  // const pokemons = pokemonsStateVariable[0];\r\n  // const setPokemons = pokemonsStateVariable[1];\r\n  // Pour récupérer seulement les pokémons, on peut faire :\r\n  // const [pokemons] = useState<Pokemon[]>(POKEMONS);\r\n\r\n  useEffect(() => {\r\n    setPokemons(POKEMONS);\r\n  }, []);\r\n  // le tableau vide en argument permet d'éviter de déclencher\r\n  // le hook d'effet à chaque modification du composant\r\n  // il se déclenche que lors du premier rendu\r\n  // Si on ajoute des dépendances au tableau, le hook se déclenchera aussi\r\n  // lors de des modifications de ses dépendances\r\n  // Si, on ne met rien, le hook s'active à chaque modification du composant\r\n\r\n  return pokemons;\r\n};\r\n\r\nexport default usePokemons;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAOC,QAAQ,MAAM,wBAAwB;;AAE7C;AACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB;EACA;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAY,EAAE,CAAC;EACvD;EACA;EACA;EACA;EACA;EACA;;EAEAC,SAAS,CAAC,MAAM;IACdK,WAAW,CAACJ,QAAQ,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EACN;EACA;EACA;EACA;EACA;EACA;;EAEA,OAAOG,QAAQ;AACjB,CAAC;AAACD,EAAA,CAtBID,WAAW;AAwBjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}