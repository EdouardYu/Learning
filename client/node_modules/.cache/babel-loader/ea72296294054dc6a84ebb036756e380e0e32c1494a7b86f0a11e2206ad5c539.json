{"ast":null,"code":"export default class AuthenticationService {\n  static isAuthenticated() {\n    const token = localStorage.getItem(\"token\");\n    // la double négation permet de convertir le token en boolean\n    return !!token;\n  }\n  static login(username, password) {\n    return fetch(\"http://localhost:3001/api/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(response => response.json()).then(response => {\n      const token = response.token;\n      this.saveToken(token);\n      return this.isAuthenticated();\n    }).catch(error => {\n      this.handleError(error);\n      return false;\n    });\n  }\n  static saveToken(token) {\n    // c'est le cookie de la page de navigation qui n'a pas d'expiration\n    // contrairement au sessionStorage qui est nettoyé quand le navigateur prend fin\n    localStorage.setItem(\"token\", token);\n  }\n  static logout() {\n    localStorage.removeItem(\"token\");\n  }\n  static handleError(error) {\n    console.log(error);\n  }\n}","map":{"version":3,"names":["AuthenticationService","isAuthenticated","token","localStorage","getItem","login","username","password","fetch","method","headers","body","JSON","stringify","then","response","json","saveToken","catch","error","handleError","setItem","logout","removeItem","console","log"],"sources":["C:/Users/yuedo/OneDrive/Bureau/JS/React/pokedex/client/src/services/authentication-service.ts"],"sourcesContent":["export default class AuthenticationService {\r\n  static isAuthenticated(): boolean {\r\n    const token: string | null = localStorage.getItem(\"token\");\r\n    // la double négation permet de convertir le token en boolean\r\n    return !!token;\r\n  }\r\n\r\n  static login(username: string, password: string): Promise<boolean> {\r\n    return fetch(\"http://localhost:3001/api/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ username, password }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        const token: string = response.token;\r\n        this.saveToken(token);\r\n        return this.isAuthenticated();\r\n      })\r\n      .catch((error) => {\r\n        this.handleError(error);\r\n        return false;\r\n      });\r\n  }\r\n\r\n  static saveToken(token: string): void {\r\n    // c'est le cookie de la page de navigation qui n'a pas d'expiration\r\n    // contrairement au sessionStorage qui est nettoyé quand le navigateur prend fin\r\n    localStorage.setItem(\"token\", token);\r\n  }\r\n\r\n  static logout(): void {\r\n    localStorage.removeItem(\"token\");\r\n  }\r\n\r\n  static handleError(error: Error): void {\r\n    console.log(error);\r\n  }\r\n}\r\n"],"mappings":"AAAA,eAAe,MAAMA,qBAAqB,CAAC;EACzC,OAAOC,eAAeA,CAAA,EAAY;IAChC,MAAMC,KAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC1D;IACA,OAAO,CAAC,CAACF,KAAK;EAChB;EAEA,OAAOG,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAAoB;IACjE,OAAOC,KAAK,CAAC,iCAAiC,EAAE;MAC9CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,QAAQ;QAAEC;MAAS,CAAC;IAC7C,CAAC,CAAC,CACCO,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAMb,KAAa,GAAGa,QAAQ,CAACb,KAAK;MACpC,IAAI,CAACe,SAAS,CAACf,KAAK,CAAC;MACrB,OAAO,IAAI,CAACD,eAAe,CAAC,CAAC;IAC/B,CAAC,CAAC,CACDiB,KAAK,CAAEC,KAAK,IAAK;MAChB,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;MACvB,OAAO,KAAK;IACd,CAAC,CAAC;EACN;EAEA,OAAOF,SAASA,CAACf,KAAa,EAAQ;IACpC;IACA;IACAC,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEnB,KAAK,CAAC;EACtC;EAEA,OAAOoB,MAAMA,CAAA,EAAS;IACpBnB,YAAY,CAACoB,UAAU,CAAC,OAAO,CAAC;EAClC;EAEA,OAAOH,WAAWA,CAACD,KAAY,EAAQ;IACrCK,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;EACpB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}